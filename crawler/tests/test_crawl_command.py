from unittest.mock import patch

from django.core.management import call_command
from django.test import TestCase

import pytest

from crawler.models import Crawl


class MockCrawlFailure(Exception):
    pass


# We use the ludios_wpull package which uses outdated SQLAlchemy code here:
# https://github.com/ArchiveTeam/ludios_wpull/blob/5.0.3/wpull/database/sqlmodel.py#L14
# Tell pytest to ignore the warning generated by this usage.
@pytest.mark.filterwarnings("ignore::sqlalchemy.exc.MovedIn20Warning")
class CrawlCommandTests(TestCase):
    def get_crawl(self):
        self.assertEqual(Crawl.objects.count(), 1)
        return Crawl.objects.first()

    def patch_wpull(self, **kwargs):
        return patch("wpull.application.app.Application.run_sync", **kwargs)

    def test_crawl_command_success(self):
        with self.patch_wpull(return_value=0):
            call_command("crawl", "http://localhost:8000")

        crawl = self.get_crawl()
        self.assertEqual(crawl.status, Crawl.Status.FINISHED)
        self.assertIsNone(crawl.failure_message)

    def test_crawl_command_exception(self):
        with self.patch_wpull(side_effect=MockCrawlFailure()):
            with self.assertRaises(MockCrawlFailure):
                call_command("crawl", "http://localhost:8000")

        crawl = self.get_crawl()
        self.assertEqual(crawl.status, Crawl.Status.FAILED)
        self.assertIn("MockCrawlFailure", crawl.failure_message)

    def test_crawl_command_failure(self):
        with self.patch_wpull(return_value=1):
            call_command("crawl", "http://localhost:8000")

        crawl = self.get_crawl()
        self.assertEqual(crawl.status, Crawl.Status.FAILED)
        self.assertEqual(
            crawl.failure_message, "Crawler finished with non-zero exit code 1"
        )

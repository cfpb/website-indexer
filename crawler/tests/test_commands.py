from unittest.mock import patch

from django.core.management import call_command
from django.test import TestCase

import pytest
from click.testing import CliRunner

from crawler.management.commands.manage_crawls import cli
from crawler.models import Crawl


class MockCrawlFailure(Exception):
    pass


# We use the ludios_wpull package which uses outdated SQLAlchemy code here:
# https://github.com/ArchiveTeam/ludios_wpull/blob/5.0.3/wpull/database/sqlmodel.py#L14
# Tell pytest to ignore the warning generated by this usage.
@pytest.mark.filterwarnings("ignore::sqlalchemy.exc.MovedIn20Warning")
class CrawlCommandTests(TestCase):
    def get_crawl(self):
        self.assertEqual(Crawl.objects.count(), 1)
        return Crawl.objects.first()

    def patch_wpull(self, **kwargs):
        return patch("wpull.application.app.Application.run_sync", **kwargs)

    def test_crawl_command_success(self):
        with self.patch_wpull(return_value=0):
            call_command("crawl", "http://localhost:8000")

        crawl = self.get_crawl()
        self.assertEqual(crawl.status, Crawl.Status.FINISHED)
        self.assertIsNone(crawl.failure_message)

    def test_crawl_command_exception(self):
        with self.patch_wpull(side_effect=MockCrawlFailure()):
            with self.assertRaises(MockCrawlFailure):
                call_command("crawl", "http://localhost:8000")

        crawl = self.get_crawl()
        self.assertEqual(crawl.status, Crawl.Status.FAILED)
        self.assertIn("MockCrawlFailure", crawl.failure_message)

    def test_crawl_command_failure(self):
        with self.patch_wpull(return_value=1):
            call_command("crawl", "http://localhost:8000")

        crawl = self.get_crawl()
        self.assertEqual(crawl.status, Crawl.Status.FAILED)
        self.assertEqual(
            crawl.failure_message, "Crawler finished with non-zero exit code 1"
        )


class ManageCrawlsCommandTests(TestCase):
    def invoke(self, *args):
        runner = CliRunner()
        result = runner.invoke(cli, args)
        self.assertEqual(result.exit_code, 0)
        return result.output

    def test_list_no_crawls(self):
        stdout = self.invoke("list")
        self.assertEqual(stdout, "")

    def test_list(self):
        c1 = Crawl.objects.create(config={"foo": "bar"})
        c2 = Crawl.objects.create(config={"bar": "baz"})
        stdout = self.invoke("list")
        self.assertEqual(stdout, f"{c2}\n{c1}\n")

    def test_delete(self):
        c1 = Crawl.objects.create(config={"foo": "bar"})
        c2 = Crawl.objects.create(config={"bar": "baz"})
        self.assertEqual(Crawl.objects.count(), 2)

        stdout = self.invoke("delete", str(c1.pk))
        self.assertEqual(stdout, f"Deleting {c1}\n")
        self.assertEqual(Crawl.objects.count(), 1)

    def test_delete_dry_run(self):
        c1 = Crawl.objects.create(config={"foo": "bar"})
        c2 = Crawl.objects.create(config={"bar": "baz"})
        self.assertEqual(Crawl.objects.count(), 2)

        stdout = self.invoke("delete", str(c1.pk), "--dry-run")
        self.assertEqual(stdout, f"Deleting {c1}\nDry run, skipping deletion\n")
        self.assertEqual(Crawl.objects.count(), 2)

    def test_clean_no_crawls(self):
        self.assertFalse(Crawl.objects.exists())
        self.invoke("clean")
        self.assertFalse(Crawl.objects.exists())

    def test_clean(self):
        c1 = Crawl.objects.create(config={}, status=Crawl.Status.STARTED)
        c2 = Crawl.objects.create(config={}, status=Crawl.Status.STARTED)
        c3 = Crawl.objects.create(config={}, status=Crawl.Status.FINISHED)
        c4 = Crawl.objects.create(config={}, status=Crawl.Status.FINISHED)
        c5 = Crawl.objects.create(config={}, status=Crawl.Status.FAILED)
        c6 = Crawl.objects.create(config={}, status=Crawl.Status.FAILED)

        stdout = self.invoke("clean")
        self.assertEqual(stdout, f"Deleting 4 crawls\n{c5}\n{c3}\n{c2}\n{c1}\n")
        self.assertEqual(Crawl.objects.count(), 2)
        self.assertEqual(
            list(Crawl.objects.values_list("pk", flat=True)), [c6.pk, c4.pk]
        )

    def test_clean_crawl_in_progress(self):
        c1 = Crawl.objects.create(config={}, status=Crawl.Status.STARTED)
        c2 = Crawl.objects.create(config={}, status=Crawl.Status.FINISHED)
        c3 = Crawl.objects.create(config={}, status=Crawl.Status.FINISHED)
        c4 = Crawl.objects.create(config={}, status=Crawl.Status.FAILED)
        c5 = Crawl.objects.create(config={}, status=Crawl.Status.STARTED)

        stdout = self.invoke("clean")
        self.assertEqual(stdout, f"Deleting 2 crawls\n{c2}\n{c1}\n")
        self.assertEqual(Crawl.objects.count(), 3)
        self.assertEqual(
            list(Crawl.objects.values_list("pk", flat=True)), [c5.pk, c4.pk, c3.pk]
        )

    def test_clean_dry_run(self):
        c1 = Crawl.objects.create(config={}, status=Crawl.Status.STARTED)
        c2 = Crawl.objects.create(config={}, status=Crawl.Status.STARTED)
        c3 = Crawl.objects.create(config={}, status=Crawl.Status.FINISHED)
        c4 = Crawl.objects.create(config={}, status=Crawl.Status.FINISHED)
        c5 = Crawl.objects.create(config={}, status=Crawl.Status.FAILED)
        c6 = Crawl.objects.create(config={}, status=Crawl.Status.FAILED)

        stdout = self.invoke("clean", "--dry-run")
        self.assertEqual(
            stdout,
            f"Deleting 4 crawls\n{c5}\n{c3}\n{c2}\n{c1}\nDry run, skipping deletion\n",
        )
        self.assertEqual(Crawl.objects.count(), 6)
